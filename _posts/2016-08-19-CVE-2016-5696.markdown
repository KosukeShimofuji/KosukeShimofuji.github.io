---
layout: post
title:  "CVE-2016-5696 OFF-PATH-TCP-EXPLOIT"
date:   2016-08-18 13:00:00 +0900
categories: vulnerability
toc: true
---

## 概要

RFC 5961を実装した2012年のLinux kernel 3.6にはChallenge ACKのレスポンスとglobal rate limit countの実装には問題があり、TCPシーケンス番号を推測される脆弱性が存在します。

## 攻撃の影響

 * 経路上にいない攻撃者がTCPセッションを乗っ取って通信の改竄が可能
 * 暗号化通信については通信の改竄はできないが、通信の暗号化方式をダウングレードすることが可能
 * 悪意のあるTorノードにルーティングを向けるなどしてTorの匿名性を脅かすことが可能
 * 攻撃の実施にはOff Path AttackerのISPが送信元IPの偽装を許す必要がある

## CVSS v3

|CVSS v3 Base Score|5.9 Medium|
|Vector|CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N|
|Impact Score| 3.6|
|Exploitability Score| 2.2|
|Attack Vector (AV)| Network|
|Attack Complexity (AC)| High|
|Privileges Required (PR)| None|
|User Interaction (UI)| None|
|Scope (S)| Unchanged|
|Confidentiality (C)| High|
|Integrity (I)| None|
|Availability (A)| None|

## 解決策、緩和策情報

各distroが提供している最新のパッチを適用してください。パッチの適用ができない場合、以下のコマンドで問題を緩和することができます。

```
net.ipv4.tcp_challenge_ack_limit = 999999999
```

## 前提知識

### Off path attackってなんだろう？

パケットの改竄を実行できる著名な攻撃手法は中間者攻撃ですが、Off Path Attackは通信の経路上に潜り込まずに、パケットインジェクションやDOSを引き起こすことができます。Off Path Attackはclient,serverの2つのホストのどちらかに向けて偽装したパケットを送信することで実行されます。

### Blind in-window attackってなんだろう？

Off path attackerにより実施されるもっとも一般的な攻撃がBlind in-window attackです。この攻撃を実施するには送信元IPの偽装を許可するネットワーク上で行う必要があります。Blind in-windows attackはシーケンス番号を推測して、不正なパケットを正常なパケットのように偽装しパケットインジェクションやDoSを引き起こすことを目的とします。
この攻撃を実施するにはまず4タプルと呼ばれる送信元IPアドレス、送信元ポート番号、送信先IPアドレス、送信先ポート番号を知る必要があります。これらの4つの情報を得た上で、正しいシーケンス番号を用いて不正なパケットを送信すると受信ウィンドウ(in-window sequence numberと呼ばれます)がfallして悪意のあるデータを受け付けるようになります。Blind in-window attackを実施するには正しいシーケンス番号を得る必要があり、そのためにはシーケンス番号が取り得る値を総当たりすることが考えられます。このような攻撃を防ぐためにRFC 5961が提案されました。

### SYN bitを用いたBlind Reset Attackの緩和策

攻撃者は既存のTCP接続の切断を試みるために、不正なSYNパケットを送信します。正常なSYNパケットは受信者が送信者の接続がリセットされたことを知らせるためのものだからです。

#### RFC 5961が導入されていないTCPのSYNパケット受信時の振る舞い

 * 有効な範囲外のシーケンス番号の場合ACKを送信します
 * 有効な範囲内のシーケンス番号の場合、受信者はこの接続をリセットします

#### RFC 5961が導入されているTCPのSYNパケット受信時の振る舞い

 * 送信者のコネクションが失われていることを確認するためにシーケンス番号に関係なく、ACK(challenge ACK)を返します。

### RST bitを用いたBlind Reset Attackの緩和策

攻撃者はRSTパケットを用いて、既存のTCP接続の切断を試みる可能性があります。

#### RFC 5961が導入されていないTCPのRSTパケット受信時の振る舞い

 * RSTパケットは接続を終了します

#### RFC 5961が導入されているTCPのRSTパケット受信時の振る舞い

 * 有効な範囲外のシーケンス番号の場合、単にdropします。
 * シーケンス番号が正確に一致した場合、接続がリセットされます。
 * 有効な範囲内ではあるが、予想と正確に一致しない場合、Challgen ACKを送信します。

### ACKスロットリング

LinuxカーネルはACKスロットリングの機能を実装しているが、chanllenge ACK counterの値はグローバル変数であり、すべてのコネクションで共有されている。
このアプローチは望まないサイドチャネル攻撃の隙を生むことになる。

## 脆弱性

linuxカーネルはsysctl_tcp_challenge_ack_limitというシステム変数を提供しており、この値は秒ごとに最大channgel
ack 生成数を設定する。この値のデフォルト値は100である。そしてこの値はすべての通信において共有されている。(無論この通信は攻撃者が生成することができる) 共有される状態はサイドチャンネル攻撃の対象となる。

### 基本的な驚異モデル

1. テストのための偽装パケットを送信する(送信のためには4 tupleを必要とする)
1. challenge ack per secondを満たす通信を攻撃者はサーバに発生させる
1. 実際に帰ってきたchanlege
ackの数をカウント得る。もしその値がシステム設定の値より少ないのであれば、いくつかのchallenge ackは偽装パケットとコネクションしている

上記の結果により攻撃者は以下の情報を得ることができる。

 * four-tupleの情報は正しいのか？
 * クライアント、もしくはサーバの次のsequene numberはなんなのか？
 * 次のack numberはなんなのか？

### 攻撃の困難性

four-tupleの情報を得るためには、中間者攻撃なしでは運任せになり、難易度が高くなる。

### まとめ

TCPスタックを用いた攻撃手法であり、off path
attackはなかなか見かけない攻撃ではあるが、現実的にfour-tupleを得るためには中間者攻撃が必要ではないかと思う。そうなると実際のこの手法を使用して攻撃されることはなかなかないのではないかという印象を受けた。

## 情報源

 * [TheHackerNews](https://thehackernews.com/2016/08/linux-tcp-packet-hacking.html)
 * [CERT](https://www.kb.cert.org/vuls/byid?query=CVE-2016-5696&searchview=)
 * [Debian](https://security-tracker.debian.org/tracker/CVE-2016-5696)
 * [Github](https://github.com/search?q="CVE-2016-5696")
 * [LWN](https://lwn.net/Search/DoSearch?words=CVE-2016-5696)
 * [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5696)
 * [PacketStorm](https://packetstormsecurity.com/search/?q=CVE-2016-5696)
 * [Redhat](https://access.redhat.com/security/cve/CVE-2016-5696)
 * [Ubuntu](https://people.canonical.com/~ubuntu-security/cve/CVE-2016-5696.html)
 * [bugtraq](https://marc.info/?s=CVE-2016-5696&l=bugtraq)
 * [exploitdb](https://www.exploit-db.com/search/?action=search&cve=2016-5696)
 * [fulldisc](https://marc.info/?s=CVE-2016-5696&l=full-disclosure)
 * [metasploit](https://www.rapid7.com/db/search?q=CVE-2016-5696)
 * [oss-sec](https://marc.info/?s=CVE-2016-5696&l=oss-security)

## 参考文献

 * [WhitePaper](http://www.cs.ucr.edu/~zhiyunq/pub/sec16_TCP_pure_offpath.pdf)
 * https://tools.ietf.org/html/rfc5961
 * [Akamai](https://blogs.akamai.com/2016/08/vulnerability-in-the-linux-kernels-tcp-stack-implementation.html)
 * [サイドチャネル攻撃](https://ja.wikipedia.org/wiki/%E3%82%B5%E3%82%A4%E3%83%89%E3%83%81%E3%83%A3%E3%83%8D%E3%83%AB%E6%94%BB%E6%92%83)
 * [Off Path Hacking](https://eprint.iacr.org/2013/623.pdf)
 * [IEEE-SP 2012勉強会：「Off-Path TCP Sequence Number Inference Attack - How Firewall Middleboxes Reduce Security」](http://www.slideshare.net/akirakanaoka/ieeesp-2012offpath-tcp-sequence-number-inference-attack-how-firewall-middleboxes-reduce-security)
 * http://www.docfoc.com/off-path-attacking-the-web-yossi-gilad-and-amir-herzberg-computer-science-department
 * [Off-Path Attacking the Web Yossi Gilad and Amir Herzberg Computer Science Department, Bar Ilan University.](https://www.usenix.org/conference/woot12/workshop-program/presentation/gilad)

