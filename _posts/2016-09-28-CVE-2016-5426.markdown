---
layout: post
title:  "CVE-2016-5426、CVE-2016-5427 - PowerDNSにバックエンドのDOS(CPU資源の消費)を実行可能な脆弱性"
date:   2016-09-28 10:00:00 +0900
categories: vlunerability
toc: true
---

# CVE-2016-5426、CVE-2016-5427 

PowerDNSのAuthoritative ServerにはDOS(CPU資源の消費)が実行可能な脆弱性が存在します。

## 概要

## CVE-2016-5426のCVSS v3

|CVSS v3 Base Score|7.5 High|
|Vector|CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H|
|Impact Score| 3.6|
|Exploitability Score| 3.9|
|Attack Vector (AV)| Network|
|Attack Complexity (AC)| Low|
|Privileges Required (PR)| None|
|User Interaction (UI)| None|
|Scope (S)| Unchanged|
|Confidentiality (C)| None|
|Integrity (I)| None|
|Availability (A)| High|

## CVE-2016-5427のCVSS v3

|CVSS v3 Base Score|7.5 High|
|Vector|CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H|
|Impact Score| 3.6|
|Exploitability Score| 3.9|
|Attack Vector (AV)| Network|
|Attack Complexity (AC)| Low|
|Privileges Required (PR)| None|
|User Interaction (UI)| None|
|Scope (S)| Unchanged|
|Confidentiality (C)| None|
|Integrity (I)| None|
|Availability (A)| High|

## 解決策、緩和策情報

PowerDNS Authoritative Server 3.4.10以上へのアップグレード

## 影響を受けるソフトウェアとバージョン

PowerDNS Authoritative Server 3.4.10 未満

## 技術的な詳細

### 脆弱な環境の構築

PowerDNS Authoritative Server 3.4.9の環境を構築する。

 * pdns version 3.4.9をソースからインストールする

```
$ sudo apt-get install g++ libboost-all-dev libtool make pkg-config libmysqlclient-dev libssl-dev autoconf bison
$ wget https://downloads.powerdns.com/releases/pdns-3.4.9.tar.bz2
$ tar xjvf pdns-3.4.9.tar.bz2
$ cd pdns-3.4.9
$ ./bootstrap
$ ./configure --with-modules="gmysql"
$ make
$ sudo make install
$ sudo cp pdns/pdns /etc/init.d/
```

 * MySQLにPowerDNS用のテーブルを作成する

```
mysql> CREATE DATABASE powerdns CHARACTER SET utf8;
Query OK, 1 row affected (0.04 sec)

mysql> CREATE USER 'powerdns'@'localhost' IDENTIFIED BY 'powerdns';
Query OK, 0 rows affected (0.14 sec)

mysql> GRANT ALL PRIVILEGES ON powerdns.* TO 'powerdns'@'localhost';
Query OK, 0 rows affected (0.02 sec)

mysql> use powerdns;
Database changed
mysql> CREATE TABLE domains (
    ->   id                    INT AUTO_INCREMENT,
    ->   name                  VARCHAR(255) NOT NULL,
    ->   master                VARCHAR(128) DEFAULT NULL,
    ->   last_check            INT DEFAULT NULL,
    ->   type                  VARCHAR(6) NOT NULL,
    ->   notified_serial       INT DEFAULT NULL,
    ->   account               VARCHAR(40) DEFAULT NULL,
    ->   PRIMARY KEY (id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected (0.18 sec)

mysql> CREATE UNIQUE INDEX name_index ON domains(name);
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE records (
    ->   id                    INT AUTO_INCREMENT,
    ->   domain_id             INT DEFAULT NULL,
    ->   name                  VARCHAR(255) DEFAULT NULL,
    ->   type                  VARCHAR(10) DEFAULT NULL,
    ->   content               VARCHAR(64000) DEFAULT NULL,
    ->   ttl                   INT DEFAULT NULL,
    ->   prio                  INT DEFAULT NULL,
    ->   change_date           INT DEFAULT NULL,
    ->   disabled              TINYINT(1) DEFAULT 0,
    ->   ordername             VARCHAR(255) BINARY DEFAULT NULL,
    ->   auth                  TINYINT(1) DEFAULT 1,
    ->   PRIMARY KEY (id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected, 1 warning (0.08 sec)

mysql> CREATE INDEX nametype_index ON records(name,type);
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX domain_id ON records(domain_id);
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX recordorder ON records (domain_id, ordername);
Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE supermasters (
    ->   ip                    VARCHAR(64) NOT NULL,
    ->   nameserver            VARCHAR(255) NOT NULL,
    ->   account               VARCHAR(40) NOT NULL,
    ->   PRIMARY KEY (ip, nameserver)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected (0.05 sec)

mysql> CREATE TABLE comments (
    ->   id                    INT AUTO_INCREMENT,
    ->   domain_id             INT NOT NULL,
    ->   name                  VARCHAR(255) NOT NULL,
    ->   type                  VARCHAR(10) NOT NULL,
    ->   modified_at           INT NOT NULL,
    ->   account               VARCHAR(40) NOT NULL,
    ->   comment               VARCHAR(64000) NOT NULL,
    ->   PRIMARY KEY (id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql> CREATE INDEX comments_domain_id_idx ON comments (domain_id);
Query OK, 0 rows affected (0.15 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX comments_name_type_idx ON comments (name, type);
Query OK, 0 rows affected (0.18 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE domainmetadata (
    ->   id                    INT AUTO_INCREMENT,
    ->   domain_id             INT NOT NULL,
    ->   kind                  VARCHAR(32),
    ->   content               TEXT,
    ->   PRIMARY KEY (id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected (0.00 sec)

mysql> CREATE INDEX domainmetadata_idx ON domainmetadata (domain_id, kind);
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE cryptokeys (
    ->   id                    INT AUTO_INCREMENT,
    ->   domain_id             INT NOT NULL,
    ->   flags                 INT NOT NULL,
    ->   active                BOOL,
    ->   content               TEXT,
    ->   PRIMARY KEY(id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected (0.03 sec)

mysql> CREATE INDEX domainidindex ON cryptokeys(domain_id);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE TABLE tsigkeys (
    ->   id                    INT AUTO_INCREMENT,
    ->   name                  VARCHAR(255),
    ->   algorithm             VARCHAR(50),
    ->   secret                VARCHAR(255),
    ->   PRIMARY KEY (id)
    -> ) Engine=InnoDB;
Query OK, 0 rows affected (0.00 sec)

mysql> CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);
Query OK, 0 rows affected (0.08 sec)
Records: 0  Duplicates: 0  Warnings: 0
```

 * pdns.confを作成する

```
# cat /usr/local/etc/pdns.conf
launch=gmysql
loglevel=10
log-dns-queries=1
gmysql-host=127.0.0.1
gmysql-user=powerdns
gmysql-password=powerdns
gmysql-dbname=powerdns
```

 *　レコードを追加する

```
$ mysql -upowerdns -ppowerdns
mysql> use poserdns;
INSERT INTO domains (name, type) values ('scapegoat.net', 'NATIVE');
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'scapegoat.net','localhost ahu@ds9a.nl 1','SOA',86400,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'scapegoat.net','dns-us1.powerdns.net','NS',86400,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'scapegoat.net','dns-eu1.powerdns.net','NS',86400,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'www.scapegoat.net','192.1.1.10','A',120,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'mail.scapegoat.net','192.1.1.11','A',120,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'pop.scapegoat.net','192.1.1.12','A',120,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'imap.scapegoat.net','192.1.1.13','A',120,NULL);
INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES (1,'admin.scapegoat.net','192.1.1.14','A',120,NULL);
```

 * レコードが引けることを確認する

```
root@scapegoat:~# dig www.scapegoat.net @127.0.0.1 +short
192.1.1.10
root@scapegoat:~# dig mail.scapegoat.net @127.0.0.1 +short
192.1.1.11
```

### 負荷を計測するためにsystatを入れる

```
# apt-get -y install sysstat
# dpkg-reconfigure sysstat
```

### 正常なDNSクエリでDOSをしてみる

* [powerdns_correct_query_dos.py](https://github.com/KosukeShimofuji/CVE-2016-5426_and_CVE-2016-5427/blob/master/exploit/powerdns_correct_query_dos.py)

![correct_query]({{site.baseurl}}/images/2016/09/28/correct_query.gif)

正常に引けるクエリを500qps程度送り込むとidleは90%程度になる。

### 500byteを超える.を多数含んだqnameでDOSをしてみる

 * [powerdns_attack_query_dos.py](https://github.com/KosukeShimofuji/CVE-2016-5426_and_CVE-2016-5427/blob/master/exploit/powerdns_attack_query_dos.py)

![attack_query]({{site.baseurl}}/images/2016/09/28/attack_query.gif)

今回問題になっているクエリを500qps程度送り込むとidleは40-30%程度になる。

### pdns-3.4.10にアップグレードして検証する

```
# /usr/local/sbin/pdns_server --version
Sep 28 16:57:23 PowerDNS Authoritative Server 3.4.10 (jenkins@autotest.powerdns.com) (C) 2001-2016 PowerDNS.COM BV
Sep 28 16:57:23 Using 64-bits mode. Built on 20160928165600 by root@scapegoat.test, gcc 4.9.2.
Sep 28 16:57:23 PowerDNS comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it according to the terms of the GPL version 2.
Sep 28 16:57:23 Features: openssl libdl
Sep 28 16:57:23 Built-in modules: gmysql
```

![upgrade]({{site.baseurl}}/images/2016/09/28/upgrade.gif)

idleは95%以上低下することはなくなっている。

## CVE-2016-5426に関する追跡が必要な情報源

 * [CERT](https://www.kb.cert.org/vuls/byid?query=CVE-2016-5426&searchview=)
 * [Debian](https://security-tracker.debian.org/tracker/CVE-2016-5426)
 * [Github](https://github.com/search?q="CVE-2016-5426")
 * [LWN](https://lwn.net/Search/DoSearch?words=CVE-2016-5426)
 * [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5426)
 * [PacketStorm](https://packetstormsecurity.com/search/?q=CVE-2016-5426)
 * [Redhat](https://access.redhat.com/security/cve/CVE-2016-5426)
 * [Ubuntu](https://people.canonical.com/~ubuntu-security/cve/CVE-2016-5426.html)
 * [bugtraq](https://marc.info/?s=CVE-2016-5426&l=bugtraq)
 * [exploitdb](https://www.exploit-db.com/search/?action=search&cve=2016-5426)
 * [fulldisc](https://marc.info/?s=CVE-2016-5426&l=full-disclosure)
 * [metasploit](https://www.rapid7.com/db/search?q=CVE-2016-5426)
 * [oss-sec](https://marc.info/?s=CVE-2016-5426&l=oss-security)
 * [bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-5426)

## CVE-2016-5427に関する追跡が必要な情報源

 * [CERT](https://www.kb.cert.org/vuls/byid?query=CVE-2016-5427&searchview=)
 * [Debian](https://security-tracker.debian.org/tracker/CVE-2016-5427)
 * [Github](https://github.com/search?q="CVE-2016-5427")
 * [LWN](https://lwn.net/Search/DoSearch?words=CVE-2016-5427)
 * [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5427)
 * [PacketStorm](https://packetstormsecurity.com/search/?q=CVE-2016-5427)
 * [Redhat](https://access.redhat.com/security/cve/CVE-2016-5427)
 * [Ubuntu](https://people.canonical.com/~ubuntu-security/cve/CVE-2016-5427.html)
 * [bugtraq](https://marc.info/?s=CVE-2016-5427&l=bugtraq)
 * [exploitdb](https://www.exploit-db.com/search/?action=search&cve=2016-5427)
 * [fulldisc](https://marc.info/?s=CVE-2016-5427&l=full-disclosure)
 * [metasploit](https://www.rapid7.com/db/search?q=CVE-2016-5427)
 * [oss-sec](https://marc.info/?s=CVE-2016-5427&l=oss-security)
 * [bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-5427)

# 参考文献

 * http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-004855.html
 * http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-004856.html
 * http://qiita.com/sischkg/items/f02783e741988663c90a
 * https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-5426
 * https://github.com/PowerDNS/pdns/commit/881b5b03a590198d03008e4200dd00cc537712f3
 * https://github.com/PowerDNS/pdns
 * http://takuya-1st.hatenablog.jp/entry/2016/07/14/202554
 * https://doc.powerdns.com/md/security/powerdns-advisory-2016-01/


